generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model company {
  companyID    Int       @id @default(autoincrement())
  companyName  String    @unique
  abbreviation String?
  category     String?
  ballots      ballots[]
  users        user[]
}

model ballots {
  ballotID        Int                 @id @default(autoincrement())
  ballotName      String
  description     String
  startDate       DateTime
  endDate         DateTime
  companyID       Int
  initiatives     ballotInitiatives[]
  positions       ballotPositions[]
  company         company             @relation(fields: [companyID], references: [companyID], onDelete: Cascade)
  votes           votes[]
  initiativeVotes initiativeVotes[]
}

model candidate {
  candidateID      Int                @id @default(autoincrement())
  fName            String
  lName            String
  titles           String?
  description      String?
  picture          String?
  ballotCandidates ballotCandidates[]
  positionVotes    positionVotes[]
}

model user {
  userID          Int               @id @default(autoincrement())
  accountType     String            @default("Member")
  username        String            @unique
  password        String
  fName           String
  lName           String
  companyID       Int
  company         company           @relation(fields: [companyID], references: [companyID], onDelete: Cascade)
  votes           votes[]
  initiativeVotes initiativeVotes[]
}

model votes {
  voteID        Int             @id @default(autoincrement())
  ballotID      Int
  userID        Int
  positionVotes positionVotes[]
  ballot        ballots         @relation(fields: [ballotID], references: [ballotID], onDelete: Cascade)
  user          user            @relation(fields: [userID], references: [userID], onDelete: Cascade)
}

model ballotInitiatives {
  initiativeID    Int                   @id @default(autoincrement())
  initiativeName  String
  description     String
  ballotID        Int
  ballot          ballots               @relation(fields: [ballotID], references: [ballotID], onDelete: Cascade)
  responses       initiativeResponses[]
  initiativeVotes initiativeVotes[]
}

model initiativeResponses {
  responseID      Int               @id @default(autoincrement())
  response        String
  initiativeID    Int
  initiative      ballotInitiatives @relation(fields: [initiativeID], references: [initiativeID], onDelete: Cascade)
  initiativeVotes initiativeVotes[]
}

model initiativeVotes {
  voteID       Int                 @id @default(autoincrement())
  userID       Int
  initiativeID Int
  ballotID     Int
  responseID   Int
  initiative   ballotInitiatives   @relation(fields: [initiativeID], references: [initiativeID], onDelete: Cascade)
  response     initiativeResponses @relation(fields: [responseID], references: [responseID], onDelete: Cascade)
  user         user                @relation(fields: [userID], references: [userID], onDelete: Cascade)
  ballot       ballots             @relation(fields: [ballotID], references: [ballotID], onDelete: Cascade)
}

model ballotPositions {
  positionID    Int                @id @default(autoincrement())
  positionName  String
  allowedVotes  Int
  writeIn       Boolean
  ballotID      Int
  candidates    ballotCandidates[]
  ballot        ballots            @relation(fields: [ballotID], references: [ballotID], onDelete: Cascade)
  positionVotes positionVotes[]
}

model ballotCandidates {
  candidateID Int
  positionID  Int
  candidate   candidate       @relation(fields: [candidateID], references: [candidateID], onDelete: Cascade)
  position    ballotPositions @relation(fields: [positionID], references: [positionID], onDelete: Cascade)

  @@id([candidateID, positionID])
}

model writeInNames {
  nameID        Int             @id @default(autoincrement())
  fName         String
  lName         String
  positionVotes positionVotes[]
}

model positionVotes {
  voteID      Int
  positionID  Int
  candidateID Int
  nameID      Int?
  candidate   candidate       @relation(fields: [candidateID], references: [candidateID], onDelete: Cascade)
  name        writeInNames?   @relation(fields: [nameID], references: [nameID])
  position    ballotPositions @relation(fields: [positionID], references: [positionID], onDelete: Cascade)
  vote        votes           @relation(fields: [voteID], references: [voteID], onDelete: Cascade)

  @@id([voteID, positionID])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  companyID         Int                 @id @default(autoincrement())
  companyName       String              @unique
  AssignedCompanies AssignedCompanies[]
  ballots           Ballots[]
  users             User[]
}

model User {
  userID            Int                 @id @default(autoincrement())
  accountType       String              @default("Member")
  username          String              @unique
  password          String
  fName             String
  lName             String
  companyID         Int
  assignedCompanies AssignedCompanies[]
  company           Company             @relation(fields: [companyID], references: [companyID], onDelete: Cascade)
  votes             Votes[]
}

model AssignedCompanies {
  companyID Int
  userID    Int
  company   Company @relation(fields: [companyID], references: [companyID], onDelete: Cascade)
  user      User    @relation(fields: [userID], references: [userID], onDelete: Cascade)

  @@id([companyID, userID])
}

model Ballots {
  ballotID    Int                 @id @default(autoincrement())
  ballotName  String
  description String
  startDate   DateTime
  endDate     DateTime
  companyID   Int
  initiatives BallotInitiatives[]
  positions   BallotPositions[]
  company     Company             @relation(fields: [companyID], references: [companyID], onDelete: Cascade)
  votes       Votes[]
}

model BallotInitiatives {
  initiativeID    Int                   @id @default(autoincrement())
  initiativeName  String
  description     String
  ballotID        Int
  ballot          Ballots               @relation(fields: [ballotID], references: [ballotID], onDelete: Cascade)
  responses       InitiativeResponses[]
  initiativeVotes InitiativeVotes[]
}

model InitiativeResponses {
  responseID      Int               @id @default(autoincrement())
  response        String
  initiativeID    Int
  initiative      BallotInitiatives @relation(fields: [initiativeID], references: [initiativeID], onDelete: Cascade)
  InitiativeVotes InitiativeVotes[]
}

model BallotPositions {
  positionID    Int                @id @default(autoincrement())
  positionName  String
  voteNum       Int
  writeIn       Boolean
  ballotID      Int
  candidates    BallotCandidates[]
  ballot        Ballots            @relation(fields: [ballotID], references: [ballotID], onDelete: Cascade)
  positionVotes PositionVotes[]
}

model Candidate {
  candidateID      Int                @id @default(autoincrement())
  fName            String
  lName            String
  titles           String?
  positions        String?
  description      String?
  picture          String?
  ballotCandidates BallotCandidates[]
  positionVotes    PositionVotes[]
}

model BallotCandidates {
  candidateID Int
  positionID  Int
  candidate   Candidate       @relation(fields: [candidateID], references: [candidateID], onDelete: Cascade)
  position    BallotPositions @relation(fields: [positionID], references: [positionID], onDelete: Cascade)

  @@id([candidateID, positionID])
}

model Votes {
  voteID          Int               @id @default(autoincrement())
  ballotID        Int
  userID          Int
  initiativeVotes InitiativeVotes[]
  positionVotes   PositionVotes[]
  ballot          Ballots           @relation(fields: [ballotID], references: [ballotID], onDelete: Cascade)
  user            User              @relation(fields: [userID], references: [userID], onDelete: Cascade)
}

model InitiativeVotes {
  voteID       Int
  initiativeID Int
  responseID   Int
  initiative   BallotInitiatives   @relation(fields: [initiativeID], references: [initiativeID], onDelete: Cascade)
  response     InitiativeResponses @relation(fields: [responseID], references: [responseID], onDelete: Cascade)
  vote         Votes               @relation(fields: [voteID], references: [voteID], onDelete: Cascade)

  @@id([voteID, initiativeID, responseID])
}

model WriteInNames {
  nameID        Int             @id @default(autoincrement())
  fName         String
  lName         String
  positionVotes PositionVotes[]
}

model PositionVotes {
  voteID      Int
  positionID  Int
  voteNum     Int
  candidateID Int
  nameID      Int?
  candidate   Candidate       @relation(fields: [candidateID], references: [candidateID], onDelete: Cascade)
  name        WriteInNames?   @relation(fields: [nameID], references: [nameID])
  position    BallotPositions @relation(fields: [positionID], references: [positionID], onDelete: Cascade)
  vote        Votes           @relation(fields: [voteID], references: [voteID], onDelete: Cascade)

  @@id([voteID, positionID, voteNum])
}
